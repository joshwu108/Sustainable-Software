{"ast":null,"code":"import axios from 'axios';\n\n// API base URL - Change this if your backend is hosted elsewhere\nconst API_BASE_URL = 'http://localhost:5000/api';\n\n// Create an axios instance\nconst apiClient = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// API service methods\nconst apiService = {\n  // Health check\n  healthCheck: async () => {\n    try {\n      const response = await apiClient.get('/health');\n      return response.data;\n    } catch (error) {\n      console.error('Health check error:', error);\n      throw error;\n    }\n  },\n  // Get list of available crops\n  getCrops: async () => {\n    try {\n      const response = await apiClient.get('/crops');\n      return response.data.crops || [];\n    } catch (error) {\n      console.error('Error getting crops:', error);\n      // Return an empty array instead of throwing to prevent UI breaking\n      return [];\n    }\n  },\n  // Get list of available areas\n  getAreas: async () => {\n    try {\n      const response = await apiClient.get('/areas');\n      return response.data.areas || [];\n    } catch (error) {\n      console.error('Error getting areas:', error);\n      // Return an empty array instead of throwing to prevent UI breaking\n      return [];\n    }\n  },\n  // Predict crop yield\n  predictYield: async predictionData => {\n    try {\n      const response = await apiClient.post('/predict', predictionData);\n\n      // Format the response data to match what the frontend components expect\n      return {\n        predicted_yield: response.data.yield_prediction,\n        confidence: 0.85,\n        // Adding a default confidence value\n        crop: response.data.crop,\n        area: response.data.area\n      };\n    } catch (error) {\n      console.error('Prediction error:', error);\n      if (error.response) {\n        // The request was made and the server responded with a status code outside of 2xx\n        throw new Error(error.response.data.error || 'Prediction failed');\n      } else if (error.request) {\n        // The request was made but no response was received\n        throw new Error('No response from server. Please try again later.');\n      } else {\n        // Something happened in setting up the request\n        throw error;\n      }\n    }\n  }\n};\nexport default apiService;","map":{"version":3,"names":["axios","API_BASE_URL","apiClient","create","baseURL","headers","apiService","healthCheck","response","get","data","error","console","getCrops","crops","getAreas","areas","predictYield","predictionData","post","predicted_yield","yield_prediction","confidence","crop","area","Error","request"],"sources":["/Users/joshuawu/Sustainable-Software/crop-yield-app/frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\n\n// API base URL - Change this if your backend is hosted elsewhere\nconst API_BASE_URL = 'http://localhost:5000/api';\n\n// Create an axios instance\nconst apiClient = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// API service methods\nconst apiService = {\n  // Health check\n  healthCheck: async () => {\n    try {\n      const response = await apiClient.get('/health');\n      return response.data;\n    } catch (error) {\n      console.error('Health check error:', error);\n      throw error;\n    }\n  },\n\n  // Get list of available crops\n  getCrops: async () => {\n    try {\n      const response = await apiClient.get('/crops');\n      return response.data.crops || [];\n    } catch (error) {\n      console.error('Error getting crops:', error);\n      // Return an empty array instead of throwing to prevent UI breaking\n      return [];\n    }\n  },\n\n  // Get list of available areas\n  getAreas: async () => {\n    try {\n      const response = await apiClient.get('/areas');\n      return response.data.areas || [];\n    } catch (error) {\n      console.error('Error getting areas:', error);\n      // Return an empty array instead of throwing to prevent UI breaking\n      return [];\n    }\n  },\n\n  // Predict crop yield\n  predictYield: async (predictionData) => {\n    try {\n      const response = await apiClient.post('/predict', predictionData);\n      \n      // Format the response data to match what the frontend components expect\n      return {\n        predicted_yield: response.data.yield_prediction,\n        confidence: 0.85, // Adding a default confidence value\n        crop: response.data.crop,\n        area: response.data.area\n      };\n    } catch (error) {\n      console.error('Prediction error:', error);\n      if (error.response) {\n        // The request was made and the server responded with a status code outside of 2xx\n        throw new Error(error.response.data.error || 'Prediction failed');\n      } else if (error.request) {\n        // The request was made but no response was received\n        throw new Error('No response from server. Please try again later.');\n      } else {\n        // Something happened in setting up the request\n        throw error;\n      }\n    }\n  }\n};\n\nexport default apiService;\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA,MAAMC,YAAY,GAAG,2BAA2B;;AAEhD;AACA,MAAMC,SAAS,GAAGF,KAAK,CAACG,MAAM,CAAC;EAC7BC,OAAO,EAAEH,YAAY;EACrBI,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;;AAEF;AACA,MAAMC,UAAU,GAAG;EACjB;EACAC,WAAW,EAAE,MAAAA,CAAA,KAAY;IACvB,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMN,SAAS,CAACO,GAAG,CAAC,SAAS,CAAC;MAC/C,OAAOD,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;MAC3C,MAAMA,KAAK;IACb;EACF,CAAC;EAED;EACAE,QAAQ,EAAE,MAAAA,CAAA,KAAY;IACpB,IAAI;MACF,MAAML,QAAQ,GAAG,MAAMN,SAAS,CAACO,GAAG,CAAC,QAAQ,CAAC;MAC9C,OAAOD,QAAQ,CAACE,IAAI,CAACI,KAAK,IAAI,EAAE;IAClC,CAAC,CAAC,OAAOH,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAC5C;MACA,OAAO,EAAE;IACX;EACF,CAAC;EAED;EACAI,QAAQ,EAAE,MAAAA,CAAA,KAAY;IACpB,IAAI;MACF,MAAMP,QAAQ,GAAG,MAAMN,SAAS,CAACO,GAAG,CAAC,QAAQ,CAAC;MAC9C,OAAOD,QAAQ,CAACE,IAAI,CAACM,KAAK,IAAI,EAAE;IAClC,CAAC,CAAC,OAAOL,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAC5C;MACA,OAAO,EAAE;IACX;EACF,CAAC;EAED;EACAM,YAAY,EAAE,MAAOC,cAAc,IAAK;IACtC,IAAI;MACF,MAAMV,QAAQ,GAAG,MAAMN,SAAS,CAACiB,IAAI,CAAC,UAAU,EAAED,cAAc,CAAC;;MAEjE;MACA,OAAO;QACLE,eAAe,EAAEZ,QAAQ,CAACE,IAAI,CAACW,gBAAgB;QAC/CC,UAAU,EAAE,IAAI;QAAE;QAClBC,IAAI,EAAEf,QAAQ,CAACE,IAAI,CAACa,IAAI;QACxBC,IAAI,EAAEhB,QAAQ,CAACE,IAAI,CAACc;MACtB,CAAC;IACH,CAAC,CAAC,OAAOb,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,mBAAmB,EAAEA,KAAK,CAAC;MACzC,IAAIA,KAAK,CAACH,QAAQ,EAAE;QAClB;QACA,MAAM,IAAIiB,KAAK,CAACd,KAAK,CAACH,QAAQ,CAACE,IAAI,CAACC,KAAK,IAAI,mBAAmB,CAAC;MACnE,CAAC,MAAM,IAAIA,KAAK,CAACe,OAAO,EAAE;QACxB;QACA,MAAM,IAAID,KAAK,CAAC,kDAAkD,CAAC;MACrE,CAAC,MAAM;QACL;QACA,MAAMd,KAAK;MACb;IACF;EACF;AACF,CAAC;AAED,eAAeL,UAAU","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}